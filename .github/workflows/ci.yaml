name: CI
on:
  push:
    branches:
    - master
    - 'v*.*'
  pull_request:
    branches:
    - master
    - 'v*.*'
  schedule:
    - cron: '0 0 * * 0'

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        rust: [1.64.0, stable, nightly]

    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup
        with:
          key: test-${{ matrix.rust }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - run: cargo test
      - run: cargo test --features integer128
      - run: cargo test --features indexmap
      - run: cargo test --all-features

  clippy:
    name: "Clippy: MSRV"
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup
        with:
          key: clippy-msrv
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.64.0
          profile: minimal
          components: clippy
          override: true
      - run: cargo clippy -- -D warnings
      - run: cargo clippy --features integer128 -- -D warnings
      - run: cargo clippy --features indexmap -- -D warnings
      - run: cargo clippy --all-features -- -D warnings
  
  rustfmt:
    name: "Format: stable"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup
        with:
          key: rustfmt-stable
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: rustfmt
          override: true
      - run: cargo fmt -- --check

  coverage:
    name: "Coverage: stable"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup
        with:
          key: coverage
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: llvm-tools-preview
          override: true
      - name: Download grcov
        run: |
          curl -sL https://github.com/mozilla/grcov/releases/download/v0.8.18/grcov-x86_64-unknown-linux-gnu.tar.bz2 | tar jxf -
          chmod +x ./grcov
      - name: Generate the coverage data
        run: |
          cargo clean
          cargo test --all-targets
          cargo test --features integer128 --all-targets
          cargo test --features indexmap --all-targets
          cargo test --all-features --all-targets
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: -Cinstrument-coverage
          RUSTDOCFLAGS: -Cinstrument-coverage
          LLVM_PROFILE_FILE: coverage/coverage-%p-%m.profraw
      - name: Generate the coverage reports
        run: |
          ./grcov . -s . --binary-path ./target/debug/deps \
            -t lcov -o coverage.lcov --branch \
            --keep-only "src/*" \
            --keep-only "tests/*" \
            --ignore-not-existing \
            --excl-line GRCOV_EXCL_LINE \
            --excl-start GRCOV_EXCL_START \
            --excl-stop GRCOV_EXCL_STOP
          ./grcov . -s . --binary-path ./target/debug/deps \
            -t html --branch \
            --keep-only "src/*" \
            --keep-only "tests/*" \
            --ignore-not-existing \
            --excl-line GRCOV_EXCL_LINE \
            --excl-start GRCOV_EXCL_START \
            --excl-stop GRCOV_EXCL_STOP
          rm -rf html/badges
      - name: Upload the coverage report to codecov.io
        uses: codecov/codecov-action@v1
        with:
          files: coverage.lcov
          fail_ci_if_error: true
      - name: Deploy the code coverage report
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./html
          destination_dir: coverage
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/master'
